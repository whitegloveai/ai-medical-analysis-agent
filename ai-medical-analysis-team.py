import os
import io
from dotenv import load_dotenv
import google.generativeai as genai
from PIL import Image
import streamlit as st

# Load environment variables from .env file
load_dotenv()

# Check for GOOGLE_API_KEY in .env or Streamlit secrets
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY") or st.secrets.get("GOOGLE_API_KEY")
if GOOGLE_API_KEY:
    st.session_state.GOOGLE_API_KEY = GOOGLE_API_KEY
else:
    GOOGLE_API_KEY = None

# Streamlit UI
st.sidebar.title("‚ÑπÔ∏è Configuration")

if not GOOGLE_API_KEY:
    api_key = st.sidebar.text_input("Enter your Google API Key:", type="password")
    st.sidebar.caption(
        "Get your API key from [Google AI Studio](https://aistudio.google.com/apikey) üîë"
    )
    if api_key:
        GOOGLE_API_KEY = api_key
        st.session_state.GOOGLE_API_KEY = GOOGLE_API_KEY
        st.success("API Key saved!")
        st.rerun()
else:
    st.sidebar.success("API Key is configured")
    if st.sidebar.button("üîÑ Reset API Key"):
        st.session_state.GOOGLE_API_KEY = None
        st.rerun()

st.sidebar.info(
    "This tool provides AI-powered analysis of medical imaging data using advanced computer vision and radiological expertise."
)
st.sidebar.warning(
    "‚ö†DISCLAIMER: This tool is for educational and informational purposes only. All analyses should be reviewed by qualified healthcare professionals. Do not make medical decisions based solely on this analysis."
)


# Initialize Gemini Model
if GOOGLE_API_KEY:
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel("gemini-2.0-flash")
else:
    model = None
    st.warning("Please configure your API key in the sidebar to continue")


# Medical Analysis Query (Structured for better parsing)
QUERY = """You are a highly skilled medical imaging expert. Analyze the patient's medical image. Provide a structured report with these sections:

1.  **Image Type & Region:**
    *   Imaging Modality: (e.g., X-ray, MRI, CT, Ultrasound)
    *   Anatomical Region: (e.g., Chest, Abdomen, Brain)
    *   Positioning: (e.g., AP, PA, Lateral)
    *   Image Quality: (e.g., Adequate, Suboptimal - explain why)

2.  **Key Findings:**
    *   (Systematic list of observations. Be precise. Include measurements, densities, and characteristics of abnormalities. Use bullet points.)

3.  **Diagnostic Assessment:**
    *   Primary Diagnosis: (with confidence level: High, Moderate, Low)
    *   Differential Diagnoses: (in order of likelihood)
    *   Supporting Evidence: (for each diagnosis, cite specific image findings)

4.  **Patient-Friendly Explanation:**
    *   (Explain the findings in simple language, avoiding jargon. Include visual analogies if helpful.)

5.  **Research Context:**
    *   (Use DuckDuckGo to find relevant medical literature, treatment protocols, and technological advances. Provide 2-3 key references with links.)

Format your response using markdown.
"""


st.title("üè• Medical Imaging Diagnosis Agent")
st.write("Upload a medical image for professional analysis")

# Upload Image
uploaded_file = st.file_uploader(
    "Upload Medical Image",
    type=["jpg", "jpeg", "png", "dicom"],
    help="Supported formats: JPG, JPEG, PNG, DICOM",
)


if uploaded_file is not None:
    try:
        image = Image.open(uploaded_file)
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            resized_image = image.resize((500, int(500 * image.height / image.width)))
            st.image(resized_image, caption="Uploaded Medical Image", use_container_width=True)

        if st.button("üîç Analyze Image", type="primary", use_container_width=True):
            if model:
                with st.spinner("Analyzing image..."):
                    image_data = uploaded_file.getvalue()
                    image_part = {"mime_type": uploaded_file.type, "data": image_data}
                    prompt_parts = [image_part, QUERY]

                    try:
                        response = model.generate_content(prompt_parts)
                        analysis_text = response.candidates[0].content.parts[0].text

                        st.markdown("### üìã Analysis Results")
                        st.markdown("---")
                        st.markdown(analysis_text)
                        st.markdown("---")
                        st.caption(
                            "Note: This analysis is generated by AI and should be reviewed by a qualified healthcare professional."
                        )

                    except Exception as e:
                        st.error(f"Analysis error: {e}")
                        st.error(f"Full exception details: {type(e).__name__}, {str(e)}")
                        st.error(f"Exception arguments: {e.args}")
                        if hasattr(response, 'prompt_feedback'):
                            st.error(f"Safety Feedback: {response.prompt_feedback}")  # Useful for debugging API rejections

            else:
                st.warning("Please configure your API key in the sidebar.")

    except Exception as e:
        st.error(f"Error processing image: {e}")